"use client"

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/lib/AuthContext'
import { AppleCard } from '@/design-system/AppleCard'
import { AppleButton } from '@/design-system/AppleButton'
import { NumerologyIcons } from '@/design-system/icons/NumerologyIcons'
import { calculateLifePathNumber, calculateSunNumber } from '@/lib/numerology/core'

// Yantra data based on numerology
const YANTRA_DATA = {
  1: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Ьр╕╣р╣Йр╕Щр╕│',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╕Ьр╕╣р╣Йр╕Щр╕│ р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И р╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Гр╕лр╕бр╣И',
    benefits: ['р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И', 'р╕кр╣Ир╕Зр╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щр╕Ьр╕╣р╣Йр╕Щр╕│', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╣Гр╕И', 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕Бр╕ер╣Йр╕▓р╕лр╕▓р╕Н'],
    color: '#FF6B35',
    symbol: 'ЁЯФе',
    mantra: 'р╣Вр╕нр╕б р╕лр╕гр╕┤ р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М р╣Ар╕зр╕ер╕▓ 6:00-12:00 р╕Щ.',
    materials: ['р╕Чр╕нр╕Зр╣Бр╕Фр╕З', 'р╣Гр╕Ър╕ер╕▓р╕Щ', 'р╕лр╕┤р╕Щ Ruby'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕нр╕нр╕Б',
    yantraPattern: `
    реР рд╣реГреАрдВ рдирдореЛ рдирдордГ
    рек реп реи
    рей рел рен  
    рео рез рем
    `
  },
  2: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б р╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М р╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕гр╣Ир╕зр╕бр╕бр╕╖р╕н',
    benefits: ['р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б', 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М', 'р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕кр╕Щр╣Ир╕лр╣М', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕гр╣Ир╕зр╕бр╕Бр╕▒р╕Щ'],
    color: '#FF69B4',
    symbol: 'ЁЯТЦ',
    mantra: 'р╣Вр╕нр╕б р╕ир╕гр╕╡ р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕Ир╕▒р╕Щр╕Чр╕гр╣М р╣Ар╕зр╕ер╕▓ 18:00-24:00 р╕Щ.',
    materials: ['р╣Ар╕Зр╕┤р╕Щ', 'р╕Др╕гр╕┤р╕кр╕Хр╕▒р╕е', 'р╕лр╕┤р╕Щ Moonstone'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕Хр╕Б',
    yantraPattern: `
    реР рд╢реНрд░реАрдВ рдирдореЛ рдирдордГ
    реи рен рем
    реп рел рез
    рек рей рео
    `
  },
  3: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Бр╕▓р╕гр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕г',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕Др╕┤р╕Фр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕гр╕гр╕Др╣М р╕Бр╕▓р╕гр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕г р╣Бр╕ер╕░р╕ир╕┤р╕ер╕Ыр╕░',
    benefits: ['р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕Др╕┤р╕Фр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕гр╕гр╕Др╣М', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕г', 'р╣Ар╕кр╕гр╕┤р╕бр╕Юр╕гр╕кр╕зр╕гр╕гр╕Др╣Мр╕Фр╣Йр╕▓р╕Щр╕ир╕┤р╕ер╕Ыр╕░', 'р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╣Вр╕нр╕Бр╕▓р╕кр╣Гр╕лр╕бр╣И'],
    color: '#FFD700',
    symbol: 'ЁЯОи',
    mantra: 'р╣Вр╕нр╕б р╕Бр╕▒р╕б р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕Юр╕╕р╕Ш р╣Ар╕зр╕ер╕▓ 12:00-18:00 р╕Щ.',
    materials: ['р╕Чр╕нр╕Зр╣Ар╕лр╕ер╕╖р╕нр╕З', 'р╣Др╕бр╣Йр╕Ир╕▒р╕Щр╕Чр╕Щр╣М', 'р╕лр╕┤р╕Щ Citrine'],
    placement: 'р╕Чр╕┤р╕ир╣Ар╕лр╕Щр╕╖р╕н',
    yantraPattern: `
    реР рдЧрдВ рдирдореЛ рдирдордГ
    рем рез рео
    рен рел рей
    реи реп рек
    `
  },
  4: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕З р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ р╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕нр╕Фр╕Чр╕Щ',
    benefits: ['р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╕Др╕Зр╕Чр╕▓р╕Зр╕Бр╕▓р╕гр╣Ар╕Зр╕┤р╕Щ', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ', 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕нр╕Фр╕Чр╕Щ', 'р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕Бр╕Рр╕▓р╕Щр╕Чр╕╡р╣Ир╣Бр╕Вр╣Зр╕Зр╣Бр╕гр╕З'],
    color: '#8B4513',
    symbol: 'ЁЯПФя╕П',
    mantra: 'р╣Вр╕нр╕б р╕гр╕▒р╕З р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М р╣Ар╕зр╕ер╕▓ 6:00-12:00 р╕Щ.',
    materials: ['р╣Ар╕лр╕ер╣Зр╕Б', 'р╕лр╕┤р╕Щ', 'р╕лр╕┤р╕Щ Garnet'],
    placement: 'р╕Чр╕┤р╕ир╣Гр╕Хр╣Й',
    yantraPattern: `
    реР рд░рдВ рдирдореЛ рдирдордГ
    рео рей рек
    рез рел реп
    рем рен реи
    `
  },
  5: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╣Ар╕кр╕гр╕╡р╕ар╕▓р╕Ю',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Бр╕▓р╕гр╣Ар╕Фр╕┤р╕Щр╕Чр╕▓р╕З р╕Др╕зр╕▓р╕бр╣Ар╕кр╕гр╕╡ р╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Ьр╕Ир╕Нр╕ар╕▒р╕в',
    benefits: ['р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╣Вр╕нр╕Бр╕▓р╕кр╣Ар╕Фр╕┤р╕Щр╕Чр╕▓р╕З', 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╣Ар╕кр╕гр╕╡', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З', 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Юр╕ер╕▒р╕Зр╣Гр╕Щр╕Бр╕▓р╕гр╕Ьр╕Ир╕Нр╕ар╕▒р╕в'],
    color: '#00CED1',
    symbol: 'ЁЯМК',
    mantra: 'р╣Вр╕нр╕б р╕лр╕гр╕┤ р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕Юр╕др╕лр╕▒р╕кр╕Ър╕Фр╕╡ р╣Ар╕зр╕ер╕▓ 18:00-24:00 р╕Щ.',
    materials: ['р╕Ыр╕гр╕нр╕Ч', 'р╣Бр╕Бр╣Йр╕з', 'р╕лр╕┤р╕Щ Aquamarine'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕нр╕нр╕Бр╣Ар╕Йр╕╡р╕вр╕Зр╣Ар╕лр╕Щр╕╖р╕н',
    yantraPattern: `
    реР рд╣реНрд░реАрдВ рдирдореЛ рдирдордГ
    рек реп реи
    рей рел рен
    рео рез рем
    `
  },
  6: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Др╕гр╕нр╕Ър╕Др╕гр╕▒р╕з',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Б р╕Др╕гр╕нр╕Ър╕Др╕гр╕▒р╕з р╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щ',
    benefits: ['р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕гр╕▒р╕Бр╣Гр╕Щр╕Др╕гр╕нр╕Ър╕Др╕гр╕▒р╕з', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щ', 'р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╣Ар╕бр╕Хр╕Хр╕▓', 'р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╣Йр╕▓р╕Щр╕Чр╕╡р╣Ир╕нр╕Ър╕нр╕╕р╣Ир╕Щ'],
    color: '#FF69B4',
    symbol: 'ЁЯПа',
    mantra: 'р╣Вр╕нр╕б р╕ир╕╕р╕Б р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕ир╕╕р╕Бр╕гр╣М р╣Ар╕зр╕ер╕▓ 12:00-18:00 р╕Щ.',
    materials: ['р╕Чр╕нр╕Зр╕Др╕│', 'р╣Ар╕Зр╕┤р╕Щ', 'р╕лр╕┤р╕Щ Rose Quartz'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕Хр╕Бр╣Ар╕Йр╕╡р╕вр╕Зр╣Гр╕Хр╣Й',
    yantraPattern: `
    реР рд╢реБрдХреНрд░ рдирдореЛ рдирдордГ
    реи рен рем
    реп рел рез
    рек рей рео
    `
  },
  7: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Ыр╕▒р╕Нр╕Нр╕▓',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Ыр╕▒р╕Нр╕Нр╕▓ р╕Бр╕▓р╕гр╕Чр╕│р╕кр╕бр╕▓р╕Шр╕┤ р╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤',
    benefits: ['р╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕▒р╕Нр╕Нр╕▓', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕кр╕бр╕▓р╕Шр╕┤', 'р╣Ар╕кр╕гр╕┤р╕бр╕кр╕Хр╕┤р╕Ыр╕▒р╕Нр╕Нр╕▓', 'р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕зр╕▓р╕бр╕ер╕╢р╕Бр╕ер╕▒р╕Ър╕Вр╕нр╕Зр╕Кр╕╡р╕зр╕┤р╕Х'],
    color: '#9370DB',
    symbol: 'ЁЯФо',
    mantra: 'р╣Вр╕нр╕б р╣Ар╕Б р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М р╣Ар╕зр╕ер╕▓ 18:00-24:00 р╕Щ.',
    materials: ['р╣Ар╕Зр╕┤р╕Щ', 'р╕Др╕гр╕┤р╕кр╕Хр╕▒р╕е', 'р╕лр╕┤р╕Щ Amethyst'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕Хр╕Бр╣Ар╕Йр╕╡р╕вр╕Зр╣Ар╕лр╕Щр╕╖р╕н',
    yantraPattern: `
    реР рдХреЗ рдирдореЛ рдирдордГ
    рем рез рео
    рен рел рей
    реи реп рек
    `
  },
  8: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕кр╕│р╣Ар╕гр╣Зр╕И',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕кр╕│р╣Ар╕гр╣Зр╕И р╕нр╕│р╕Щр╕▓р╕И р╣Бр╕ер╕░р╕Бр╕▓р╕гр╣Ар╕Зр╕┤р╕Щ',
    benefits: ['р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Гр╕Щр╕Бр╕▓р╕гр╕Зр╕▓р╕Щ', 'р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╕Др╕зр╕▓р╕бр╕гр╣Ир╕│р╕гр╕зр╕в', 'р╣Ар╕Юр╕┤р╣Ир╕бр╕нр╕│р╕Щр╕▓р╕И', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕гр╕┤р╕лр╕▓р╕г'],
    color: '#000080',
    symbol: 'ЁЯСС',
    mantra: 'р╣Вр╕нр╕б р╕ир╕Щр╕┤ р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╣Ар╕кр╕▓р╕гр╣М р╣Ар╕зр╕ер╕▓ 6:00-12:00 р╕Щ.',
    materials: ['р╣Ар╕лр╕ер╣Зр╕Бр╕Фр╕│', 'р╕лр╕┤р╕Щ', 'р╕лр╕┤р╕Щ Sapphire'],
    placement: 'р╕Чр╕┤р╕ир╣Гр╕Хр╣Й',
    yantraPattern: `
    реР рд╢рдирд┐ рдирдореЛ рдирдордГ
    рео рей рек
    рез рел реп
    рем рен реи
    `
  },
  9: {
    name: 'р╕вр╕▒р╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╣Ар╕бр╕Хр╕Хр╕▓',
    description: 'р╣Ар╕кр╕гр╕┤р╕бр╕Др╕зр╕▓р╕бр╣Ар╕бр╕Хр╕Хр╕▓ р╕Бр╕▓р╕гр╣Гр╕лр╣Й р╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щ',
    benefits: ['р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╣Ар╕бр╕Хр╕Хр╕▓', 'р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╣Гр╕лр╣Й', 'р╣Ар╕кр╕гр╕┤р╕бр╕Ир╕┤р╕Хр╣Гр╕Ир╕Чр╕╡р╣Ир╕Фр╕╡', 'р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╕Бр╕▓р╕гр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н'],
    color: '#DC143C',
    symbol: 'тЭдя╕П',
    mantra: 'р╣Вр╕нр╕б р╕бр╕▒р╕З р╕Щр╕░р╣Вр╕б р╕Щр╕░р╕бр╕░',
    bestTime: 'р╕зр╕▒р╕Щр╕нр╕▒р╕Зр╕Др╕▓р╕г р╣Ар╕зр╕ер╕▓ 12:00-18:00 р╕Щ.',
    materials: ['р╕Чр╕нр╕Зр╣Бр╕Фр╕З', 'р╣Гр╕Ър╕ер╕▓р╕Щ', 'р╕лр╕┤р╕Щ Coral'],
    placement: 'р╕Чр╕┤р╕ир╕Хр╕░р╕зр╕▒р╕Щр╕нр╕нр╕Бр╣Ар╕Йр╕╡р╕вр╕Зр╣Гр╕Хр╣Й',
    yantraPattern: `
    реР рдордВ рдирдореЛ рдирдордГ
    рек реп реи
    рей рел рен
    рео рез рем
    `
  }
}

export default function YantraPage() {
  const router = useRouter()
  const { activeProfile } = useAuth()
  const [selectedYantra, setSelectedYantra] = useState<number | null>(null)
  const [showDetails, setShowDetails] = useState(false)

  // Demo data if no profile
  const demoProfile = {
    name: 'р╕кр╕бр╕Кр╕▓р╕в р╣Гр╕Ир╕Фр╕╡',
    birthDate: '1990-05-15'
  }

  const currentProfile = activeProfile || demoProfile
  const lifePath = calculateLifePathNumber(currentProfile.birthDate)
  const sunNumber = calculateSunNumber(currentProfile.birthDate)

  // Recommended yantras based on numerology
  const recommendedYantras = [lifePath, sunNumber].filter((num, index, arr) => arr.indexOf(num) === index)

  const handleYantraSelect = (number: number) => {
    setSelectedYantra(number)
    setShowDetails(true)
  }

  return (
    <div className="min-h-screen bg-black text-white p-4">
      <div className="max-w-6xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <div className="text-6xl mb-4">ЁЯФп</div>
          <h1 className="text-4xl font-bold text-white">р╕вр╕▒р╕Щр╕Хр╣Мр╕бр╕Зр╕Др╕е</h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto">
            р╕вр╕▒р╕Щр╕Хр╣Мр╕ир╕▒р╕Бр╕Фр╕┤р╣Мр╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕Бр╕▒р╕Ър╣Ар╕ер╕Вр╕ир╕▓р╕кр╕Хр╕гр╣Мр╕Вр╕нр╕Зр╕Др╕╕р╕У<br />
            р╣Ар╕кр╕гр╕┤р╕бр╕Юр╕ер╕▒р╕Зр╕Кр╕╡р╕зр╕┤р╕Хр╣Бр╕ер╕░р╕Фр╕╢р╕Зр╕Фр╕╣р╕Фр╕кр╕┤р╣Ир╕Зр╕Фр╕╡р╣Ж
          </p>
        </div>

        {/* Personal Recommendations */}
        <AppleCard className="p-6">
          <div className="flex items-center gap-4 mb-6">
            <NumerologyIcons.yantra size={32} className="text-amber-400" />
            <div>
              <h2 className="text-2xl font-bold text-white">р╕вр╕▒р╕Щр╕Хр╣Мр╕Чр╕╡р╣Ир╣Бр╕Щр╕░р╕Щр╕│р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕╕р╕У</h2>
              <p className="text-gray-400">
                {currentProfile.name} тАв Life Path: {lifePath} тАв Sun Number: {sunNumber}
              </p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {recommendedYantras.map((number) => {
              const yantra = YANTRA_DATA[number as keyof typeof YANTRA_DATA]
              if (!yantra) return null
              return (
                <div 
                  key={number}
                  className="relative bg-gradient-to-br from-amber-500/20 to-orange-500/20 border border-amber-500/30 rounded-2xl p-6 cursor-pointer hover:scale-105 transition-all"
                  onClick={() => handleYantraSelect(number)}
                >
                  <div className="absolute top-4 right-4">
                    <div className="bg-amber-500/20 text-amber-300 px-3 py-1 rounded-full text-sm font-medium">
                      р╣Бр╕Щр╕░р╕Щр╕│
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4 mb-4">
                    <div className="text-4xl">{yantra.symbol}</div>
                    <div>
                      <h3 className="text-xl font-bold text-white">{yantra.name}</h3>
                      <p className="text-amber-300">р╣Ар╕ер╕В {number}</p>
                    </div>
                  </div>
                  
                  <p className="text-gray-300 mb-4">{yantra.description}</p>
                  
                  <div className="flex flex-wrap gap-2">
                    {yantra.benefits.slice(0, 2).map((benefit, index) => (
                      <span key={index} className="bg-white/10 text-white px-3 py-1 rounded-full text-sm">
                        {benefit}
                      </span>
                    ))}
                  </div>
                </div>
              )
            })}
          </div>
        </AppleCard>

        {/* All Yantras Grid */}
        <div>
          <h2 className="text-3xl font-bold text-white mb-6 text-center">р╕вр╕▒р╕Щр╕Хр╣Мр╕Чр╕▒р╣Йр╕З 9 р╣Бр╕Ър╕Ъ</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Object.entries(YANTRA_DATA).map(([number, yantra]) => {
              const isRecommended = recommendedYantras.includes(parseInt(number))
              
              return (
                <AppleCard 
                  key={number}
                  className={`relative p-6 cursor-pointer hover:scale-105 transition-all ${
                    isRecommended ? 'ring-2 ring-amber-500/50' : ''
                  }`}
                  onClick={() => handleYantraSelect(parseInt(number))}
                >
                  {isRecommended && (
                    <div className="absolute top-4 right-4">
                      <div className="bg-amber-500/20 text-amber-300 px-2 py-1 rounded-full text-xs font-medium">
                        р╣Бр╕Щр╕░р╕Щр╕│
                      </div>
                    </div>
                  )}
                  
                  <div className="text-center space-y-4">
                    <div className="text-5xl" style={{ color: yantra.color }}>
                      {yantra.symbol}
                    </div>
                    
                    <div>
                      <h3 className="text-xl font-bold text-white mb-2">{yantra.name}</h3>
                      <div className="text-lg font-medium mb-2" style={{ color: yantra.color }}>
                        р╣Ар╕ер╕В {number}
                      </div>
                      <p className="text-gray-400 text-sm">{yantra.description}</p>
                    </div>
                    
                    <div className="space-y-2">
                      {yantra.benefits.slice(0, 3).map((benefit, index) => (
                        <div key={index} className="bg-white/5 text-white px-3 py-1 rounded-full text-sm">
                          {benefit}
                        </div>
                      ))}
                    </div>
                  </div>
                </AppleCard>
              )
            })}
          </div>
        </div>

        {/* Yantra Details Modal */}
        {showDetails && selectedYantra && (
          <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
            <AppleCard className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <div className="p-8 space-y-6">
                {(() => {
                  const yantra = YANTRA_DATA[selectedYantra as keyof typeof YANTRA_DATA]
                  return (
                    <>
                      {/* Header */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <div className="text-6xl">{yantra.symbol}</div>
                          <div>
                            <h2 className="text-3xl font-bold text-white">{yantra.name}</h2>
                            <p className="text-xl" style={{ color: yantra.color }}>р╣Ар╕ер╕В {selectedYantra}</p>
                          </div>
                        </div>
                        
                        <AppleButton
                          variant="ghost"
                          onClick={() => setShowDetails(false)}
                        >
                          тЬХ
                        </AppleButton>
                      </div>

                      {/* Description */}
                      <div className="bg-white/5 rounded-2xl p-6">
                        <h3 className="text-xl font-bold text-white mb-3">р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕в</h3>
                        <p className="text-gray-300 text-lg">{yantra.description}</p>
                      </div>

                      {/* Benefits */}
                      <div className="bg-white/5 rounded-2xl p-6">
                        <h3 className="text-xl font-bold text-white mb-4">р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣М</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          {yantra.benefits.map((benefit, index) => (
                            <div key={index} className="flex items-center gap-3">
                              <div className="text-green-400">тЬУ</div>
                              <span className="text-gray-300">{benefit}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Yantra Pattern */}
                      <div className="bg-white/5 rounded-2xl p-6">
                        <h3 className="text-xl font-bold text-white mb-4">р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕вр╕▒р╕Щр╕Хр╣М</h3>
                        <div className="bg-black/50 rounded-xl p-6 text-center">
                          <pre className="text-amber-300 text-lg font-mono whitespace-pre-line">
                            {yantra.yantraPattern}
                          </pre>
                        </div>
                      </div>

                      {/* Usage Instructions */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="bg-white/5 rounded-2xl p-6">
                          <h3 className="text-xl font-bold text-white mb-4">р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Й</h3>
                          <div className="space-y-3 text-gray-300">
                            <div><strong>р╕бр╕Щр╕Хр╣М:</strong> {yantra.mantra}</div>
                            <div><strong>р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕Фр╕╡:</strong> {yantra.bestTime}</div>
                            <div><strong>р╕Чр╕┤р╕ир╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б:</strong> {yantra.placement}</div>
                          </div>
                        </div>

                        <div className="bg-white/5 rounded-2xl p-6">
                          <h3 className="text-xl font-bold text-white mb-4">р╕зр╕▒р╕кр╕Фр╕╕р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б</h3>
                          <div className="space-y-2">
                            {yantra.materials.map((material, index) => (
                              <div key={index} className="flex items-center gap-3">
                                <div className="w-2 h-2 rounded-full" style={{ backgroundColor: yantra.color }}></div>
                                <span className="text-gray-300">{material}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>

                      {/* Action Buttons */}
                      <div className="flex gap-4 pt-4">
                        <AppleButton
                          variant="primary"
                          className="flex-1"
                          onClick={() => {
                            // TODO: Implement order functionality
                            alert('р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕кр╕▒р╣Ир╕Зр╕Лр╕╖р╣Йр╕нр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ')
                          }}
                        >
                          ЁЯЫТ р╕кр╕▒р╣Ир╕Зр╕Чр╕│р╕вр╕▒р╕Щр╕Хр╣М
                        </AppleButton>
                        <AppleButton
                          variant="secondary"
                          className="flex-1"
                          onClick={() => router.push('/dashboard/ai-chat')}
                        >
                          ЁЯТм р╕Ыр╕гр╕╢р╕Бр╕йр╕▓ AI
                        </AppleButton>
                      </div>
                    </>
                  )
                })()}
              </div>
            </AppleCard>
          </div>
        )}

        {/* Footer */}
        <div className="text-center py-8">
          <p className="text-gray-500 text-sm">
            р╕вр╕▒р╕Щр╕Хр╣Мр╣Ар╕Ыр╣Зр╕Щр╕ир╕▓р╕кр╕Хр╕гр╣Мр╣Вр╕Ър╕гр╕▓р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕кр╕гр╕┤р╕бр╕Юр╕ер╕▒р╕Зр╕Кр╕╡р╕зр╕┤р╕Х<br />
            р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Вр╕╢р╣Йр╕Щр╕нр╕вр╕╣р╣Ир╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Ыр╕Пр╕┤р╕Ър╕▒р╕Хр╕┤р╕Вр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕Ър╕╕р╕Др╕Др╕е
          </p>
        </div>
      </div>
    </div>
  )
}
