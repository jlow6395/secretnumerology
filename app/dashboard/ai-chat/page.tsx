"use client"

import React, { useState, useRef, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { NumerologyIcons } from '@/design-system/icons/NumerologyIcons'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { ArrowLeft, Send, Bot, User, Sparkles, Clock, Heart, Star } from 'lucide-react'

interface Message {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  isTyping?: boolean
}

export default function AiChatPage() {
  const router = useRouter()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Numerologist ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏ú‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏Ç Life Path\n‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•\n‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const quickQuestions = [
    {
      icon: Heart,
      text: '‡πÄ‡∏•‡∏Ç 7 ‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 3 ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?',
      category: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å'
    },
    {
      icon: Star,
      text: '‡πÄ‡∏•‡∏Ç Life Path 7 ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?',
      category: '‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û'
    },
    {
      icon: Sparkles,
      text: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?',
      category: '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'
    },
    {
      icon: Clock,
      text: '‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ 2024 ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?',
      category: '‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•'
    }
  ]

  const aiResponses = {
    '‡πÄ‡∏•‡∏Ç 7 ‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 3 ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?': `‡πÄ‡∏•‡∏Ç 7 ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç 3 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ! 

üîÆ **‡πÄ‡∏•‡∏Ç 7** - ‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏°‡∏µ‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏™‡∏π‡∏á
üé® **‡πÄ‡∏•‡∏Ç 3** - ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô ‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå

**‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ:**
‚Ä¢ ‡πÄ‡∏•‡∏Ç 3 ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç 7 ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
‚Ä¢ ‡πÄ‡∏•‡∏Ç 7 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç 3
‚Ä¢ ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÜ

**‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:**
‚Ä¢ ‡πÄ‡∏•‡∏Ç 7 ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç 3 ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏á‡∏≤
‚Ä¢ ‡πÄ‡∏•‡∏Ç 3 ‡∏û‡∏π‡∏î‡πÄ‡∏Å‡πà‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏Ç 7 ‡∏ä‡∏≠‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö

**‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ: 75/100** üíï`,

    '‡πÄ‡∏•‡∏Ç Life Path 7 ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?': `‡πÄ‡∏•‡∏Ç Life Path 7 ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‚ú®

üß† **‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡πÅ‡∏´‡∏•‡∏°**
‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á
‚Ä¢ ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô
‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏î‡∏µ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡πá‡∏ß

üîç **‡∏ô‡∏±‡∏Å‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á**
‚Ä¢ ‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡πÄ‡∏ú‡∏¥‡∏ô
‚Ä¢ ‡∏ä‡∏≠‡∏ö‡∏Ç‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏¢‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ ‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥

üßò **‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡∏™‡∏π‡∏á**
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á
‚Ä¢ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤
‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÑ‡∏î‡πâ‡∏î‡∏µ

üíé **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå**
‚Ä¢ ‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
‚Ä¢ ‡∏°‡∏µ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà
‚Ä¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢, ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô, ‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤, ‡∏Ñ‡∏£‡∏π, ‡∏´‡∏°‡∏≠`,

    '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?': `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 7 ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üåü

üîÆ **‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ**
‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏Ñ‡∏£‡πà‡∏Ñ‡∏£‡∏ß‡∏ç
‚Ä¢ ‡∏î‡∏≤‡∏ß‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏ç‡∏≤
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ

‚úÖ **‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:**
‚Ä¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
‚Ä¢ ‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠ meditation
‚Ä¢ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô journal ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î
‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û

‚ö†Ô∏è **‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥:**
‚Ä¢ ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
‚Ä¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏ô‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î

üéØ **‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡πÇ‡∏ä‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: 7, 16, 25**
üåà **‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•: ‡∏°‡πà‡∏ß‡∏á, ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°**
‚è∞ **‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏µ: 07:00-09:00, 19:00-21:00**`,

    '‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ 2024 ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?': `‡∏õ‡∏µ 2024 (2+0+2+4 = 8) ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡∏ô‡∏≤‡∏à! üí™

üéØ **‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2024:**

**‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å: 8**
‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á
‚Ä¢ ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥

**‡πÄ‡∏•‡∏Ç‡∏£‡∏≠‡∏á: 2, 4, 6**
‚Ä¢ ‡πÄ‡∏•‡∏Ç 2: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ ‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô
‚Ä¢ ‡πÄ‡∏•‡∏Ç 4: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á  
‚Ä¢ ‡πÄ‡∏•‡∏Ç 6: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö

üî¢ **‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏á‡∏Ñ‡∏•:**
‚Ä¢ ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 8, 2, 4, 6
‚Ä¢ ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ 8, 17, 26, 35

üè† **‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡∏µ:**
‚Ä¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç 8: ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç
‚Ä¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç 17 (1+7=8): ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‚Ä¢ ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç 26 (2+6=8): ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏µ

üí∞ **‡∏ß‡∏±‡∏ô‡∏°‡∏á‡∏Ñ‡∏•‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏•‡∏≤‡∏Å:**
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 8, 17, 26 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò (‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç 8)

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç 7 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á!`
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const simulateAiResponse = (userMessage: string) => {
    setIsTyping(true)
    
    setTimeout(() => {
      const response = aiResponses[userMessage as keyof typeof aiResponses] || 
        `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "${userMessage}" ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å\n\n‡πÉ‡∏ô‡πÄ‡∏•‡∏Ç‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‚ú®`

      const aiMessage: Message = {
        id: Date.now().toString(),
        type: 'ai',
        content: response,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, aiMessage])
      setIsTyping(false)
    }, 1500)
  }

  const handleSendMessage = () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    simulateAiResponse(inputValue)
    setInputValue('')
  }

  const handleQuickQuestion = (question: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: question,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    simulateAiResponse(question)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="min-h-screen bg-black text-white flex flex-col">
      {/* Background Pattern */}
      <div className="fixed inset-0 opacity-5">
        <div className="w-full h-full bg-gradient-to-br from-purple-500/20 via-blue-500/20 to-indigo-600/20" />
      </div>
      
      {/* Header */}
      <div className="relative z-10 border-b border-white/10 bg-black/20 backdrop-blur-xl">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => router.back()}
              className="w-10 h-10 rounded-full bg-white/10 hover:bg-white/20 border border-white/20"
            >
              <ArrowLeft size={18} />
            </Button>
            
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 rounded-full bg-gradient-to-br from-purple-500 to-blue-600 flex items-center justify-center">
                <NumerologyIcons.aiChat size={24} color="white" />
              </div>
              
              <div>
                <h1 className="text-xl font-bold text-white">AI Numerologist</h1>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse" />
                  <span className="text-sm text-gray-400">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Messages Container */}
      <div className="flex-1 relative z-10 overflow-hidden">
        <div className="max-w-4xl mx-auto px-4 py-6 h-full flex flex-col">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto space-y-6 mb-6">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] flex gap-3 ${
                    message.type === 'user' ? 'flex-row-reverse' : 'flex-row'
                  }`}
                >
                  {/* Avatar */}
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${
                      message.type === 'user'
                        ? 'bg-gradient-to-br from-purple-500 to-blue-600'
                        : 'bg-gradient-to-br from-indigo-500 to-purple-600'
                    }`}
                  >
                    {message.type === 'user' ? (
                      <User size={20} />
                    ) : (
                      <Bot size={20} />
                    )}
                  </div>

                  {/* Message Bubble */}
                  <div
                    className={`rounded-2xl p-4 ${
                      message.type === 'user'
                        ? 'bg-gradient-to-br from-purple-500 to-blue-600 text-white'
                        : 'bg-black/20 backdrop-blur-xl border border-white/10 text-gray-100'
                    }`}
                  >
                    <div className="whitespace-pre-wrap text-sm leading-relaxed">
                      {message.content}
                    </div>
                    
                    <div className="mt-2 text-xs opacity-70">
                      {message.timestamp.toLocaleTimeString('th-TH', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {/* Typing Indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="max-w-[80%] flex gap-3">
                  <div className="w-10 h-10 rounded-full bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center">
                    <Bot size={20} />
                  </div>
                  
                  <div className="bg-black/20 backdrop-blur-xl border border-white/10 rounded-2xl p-4">
                    <div className="flex items-center gap-1">
                      <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" />
                      <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                      <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                      <span className="ml-2 text-sm text-gray-400">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Questions */}
          {messages.length <= 1 && (
            <div className="mb-6">
              <h3 className="text-sm font-medium text-gray-400 mb-3">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {quickQuestions.map((question, index) => (
                  <Card
                    key={index}
                    className="bg-black/20 backdrop-blur-xl border border-white/10 p-4 cursor-pointer hover:border-white/20 transition-all duration-300"
                    onClick={() => handleQuickQuestion(question.text)}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500/20 to-blue-500/20 flex items-center justify-center">
                        <question.icon size={16} className="text-purple-400" />
                      </div>
                      
                      <div className="flex-1">
                        <p className="text-white text-sm font-medium">{question.text}</p>
                        <Badge variant="secondary" className="mt-1 text-xs bg-purple-500/20 text-purple-300 border-purple-500/30">
                          {question.category}
                        </Badge>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {/* Input Area */}
          <div className="bg-black/20 backdrop-blur-xl border border-white/10 rounded-2xl p-4">
            <div className="flex items-end gap-3">
              <div className="flex-1">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                  className="bg-transparent border-none text-white placeholder:text-gray-400 text-sm resize-none min-h-[44px] focus:ring-0 focus:outline-none"
                  disabled={isTyping}
                />
              </div>
              
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                size="icon"
                className="w-11 h-11 rounded-xl bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white flex-shrink-0"
              >
                <Send size={18} />
              </Button>
            </div>
            
            <div className="flex items-center justify-between mt-3 text-xs text-gray-400">
              <span>‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á</span>
              <span>AI ‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
